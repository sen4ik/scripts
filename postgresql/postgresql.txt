# brew install postgres@10
brew install postgres

# run postgres server
pg_ctl -D /usr/local/var/postgres start

psql -h localhost -d hasura -U postgres

\l - Display database
\c - Connect to database
\dn - List schemas
\dt - List tables inside public schemas
\dt public. - List tables inside particular schemas. For eg: 'schema1'.
\du - List all user accounts

# view constraints for table
SELECT conname
FROM pg_constraint
WHERE conrelid =
    (SELECT oid 
    FROM pg_class
    WHERE relname LIKE 'order');      
           
SELECT con.*
   FROM pg_catalog.pg_constraint con
        INNER JOIN pg_catalog.pg_class rel
                   ON rel.oid = con.conrelid
        INNER JOIN pg_catalog.pg_namespace nsp
                   ON nsp.oid = connamespace
   WHERE nsp.nspname = 'public'
         AND rel.relname = 'order';

# create db
postgres=# create database mydb;

# create user and grant access
postgres=# create user postgres with encrypted password 'postgres';
postgres=# grant all privileges on database hasura to postgres;

# make user superuser
postgres=# ALTER USER postgres WITH SUPERUSER;

create schema public;

# drops all tables owned by user
drop owned by user;

pg_dump postgresql://postgres@hasuragraphqlapi.rds.amazonaws.com:5432/has -Fc -f "${HOME}/dbdumps/dump.gz" --exclude-table member --exclude-table organization --exclude-table user

pg_restore --dbname=has --format=custom --jobs=4 --host=localhost --username=sen4ik --port=5432 --clean "${HOME}/dbdumps/dump.gz"

pg_dump postgresql://postgres@hasuragraphqlapi.rds.amazonaws.com:5432/has -Fc -f "${HOME}/dbdumps/dump_specific_tables.gz" --table user --table organization --table member

# dump only data from table user
pg_dump postgresql://postgres@hasuragraphqlapi.rds.amazonaws.com:5432/has -Fp -f "${HOME}/dbdumps/user_table_data" --schema=public --data-only --table user

# dump only schema of table user
pg_dump postgresql://postgres@hasuragraphqlapi.rds.amazonaws.com:5432/has -Fp -f "${HOME}/dbdumps/user_table_schema" --schema=public --schema-only --table user

# get functions
cat public_schema | sed -n -e '/CREATE FUNCTION/,/-- Name:/ p' > functions
# get sequences
cat public_schema | sed -n -e '/CREATE SEQUENCE/,/-- Name:/ p' > sequences
# get sequence alters
cat public_schema | awk '/ALTER SEQUENCE/' > sequence_alters

# creating indexes
CREATE INDEX confirmation_number_order_id_idx ON public.confirmation_number USING btree (order_id);
CREATE INDEX confirmation_number_index ON public.confirmation_number USING btree (id);

# view existing indexes
SELECT indexname, indexdef FROM pg_indexes WHERE tablename = 'order';
SELECT tablename, indexname, indexdef FROM pg_indexes WHERE schemaname = 'public' ORDER BY tablename, indexname;
